const _ = require("lodash")
const co = require("co")

module.exports = angular.module("falcorception.sourceCreate", [
  require("services/falcorModel.service").name,
  // require("jumbotron/jumbotron").name,
])

// .config(function ($routeProvider) {
//   $routeProvider
//     .when("/apis/source-create?forRoute", {
//       template: '<source-create for-route="$resolve.forRoute" available-kinds="$resolve.availableKinds"></source-create>',
//       resolve: {
//         forRoute: $route => _.has($route.current.params, "forRoute"),
//         availableKinds: falcorModel =>
//           falcorModel.get(
//             ["sources", "availableKinds"]
//           ).then(_.property(["json", "sources", "availableKinds"])),
//       },
//     })
// })

.component("sourceCreate", {
  templateUrl: "node_modules/sourceCreate/sourceCreate.html",
  bindings: {
    onSubmit: "&",
  },
  controller($scope, $location, falcorModel) {
    const ctrl = this
    ctrl.availableKinds = ["json", "firebase", "rest"]
    ctrl.source = {name: "Unamed source", kind: "json"}
    ctrl.showUrlField = kind => _.includes(["firebase", "rest"], kind)
    ctrl.showJsonField = kind => _.includes(["json"], kind)

    ctrl.submit = co.wrap(function* (source) {
      ctrl.errors = []
      try {
        const response = yield falcorModel.call(
          ["sources", "create"],
          [source.name, source.kind, source.config],
          ["id"])
        // $scope.$apply(() => $location.path(`apis/${ctrl.forApi}/route-create`))
        source.id = response.json.sources.lastAdded.id
        $scope.$apply(() => ctrl.onSubmit({source}))
      } catch (errors) {
        ctrl.errors = _.map(errors, "value")
        $scope.$apply()
      }
    })
  },
})
